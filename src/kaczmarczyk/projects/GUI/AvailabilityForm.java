package kaczmarczyk.projects.GUI;

import kaczmarczyk.projects.*;

import javax.swing.*;
import javax.swing.text.DateFormatter;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

/** Extension of the JDialog enabling searching the specific film showing and choosing seat */
public class AvailabilityForm extends JDialog {
    /** The cinema main platform */
    private final Cinema cinema;
    /** Program od the chosen date */
    private Program tempProgram;
    /** Films of the chosen date */
    private final ArrayList<Film> filmsOfTheDay = new ArrayList<>();
    private JDialog child;
    private JComboBox<Showing> cbHourList;
    private JSpinner spDate;
    private JPanel hallPane;
    private JPanel contentPane;
    private JComboBox<Film> cbFilm;
    private JButton btConfirm;
    private JLabel lbHall;
    private JButton btBack;
    private JButton btSell;
    /** Showings of the chosen date */
    private ArrayList<Showing> showingsOfTheDay = new ArrayList<>();
    /** List of tickets to sell generated by choosing seats */
    private final ArrayList<PotentialTicket> potentialTicketsToSell = new ArrayList<>();
    private MagicSeatButton[][] buttons;

    public AvailabilityForm(Cinema cinema){
        super();
        this.cinema = cinema;
        setTitle("Dostępność miejsc");
        setSize(900, 700);
        setContentPane(contentPane);
        filterFilms();
        btSell.setEnabled(false);

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                if(child != null && child.isDisplayable())
                    child.dispatchEvent(new WindowEvent(child, WindowEvent.WINDOW_CLOSING));
            }
        });

        cbFilm.addActionListener(e -> filterHours());

        spDate.addChangeListener(e -> filterFilms());
        btConfirm.addActionListener(e -> createHallPane());
        btBack.addActionListener(e -> {
            AvailabilityForm.this.dispose();
            potentialTicketsToSell.clear();
        });
        btSell.addActionListener(e -> {
            SellingForm sellingForm = new SellingForm(AvailabilityForm.this.cinema, potentialTicketsToSell, AvailabilityForm.this);
            child = sellingForm;
            sellingForm.setVisible(true);
        });
    }


    private void createUIComponents() {
        // TODO: place custom component creation code here

        Calendar calendar = Calendar.getInstance();
        Date now = calendar.getTime();
        calendar.add(Calendar.DAY_OF_YEAR, -1);
        Date startDate = calendar.getTime();
        SpinnerDateModel spinnerDateModel = new SpinnerDateModel(now, startDate, null, Calendar.DAY_OF_WEEK);
        spDate = new JSpinner(spinnerDateModel);
        JSpinner.DateEditor editor = new JSpinner.DateEditor(spDate, "dd.MM.yyyy");
        spDate.setEditor(editor);
        DateFormatter dateFormatter = (DateFormatter)editor.getTextField().getFormatter();
        dateFormatter.setAllowsInvalid(false);
        dateFormatter.setOverwriteMode(true);

        hallPane = new JPanel(new GridLayout());
        hallPane.add(new JLabel("Wybierz datę, film i godzinę"));
    }

    /** Shows seats of the hall where chosen showing takes place; prepares class fields to sell chosen tickets */
    private void createHallPane(){
        Hall hall = tempProgram.halls.get(((Showing) cbHourList.getSelectedItem()).getHall()-1);
        lbHall.setText("Sala " + hall.getHallNumber());
        int rows = hall.getCurrentRowNumber();
        int [] sizes = hall.rows.stream().mapToInt(r->r.seats.size()).toArray();
        int columns = hall.rows.stream().mapToInt(r->r.seats.size()).max().getAsInt();
        hallPane.removeAll();
        hallPane.setLayout(new GridLayout(rows+1,columns+2));
        hallPane.revalidate();
        hallPane.add(new JLabel(""));
        for(int i = 0; i < columns; ++i){
            JLabel label = new JLabel(Integer.toString(i+1));
            label.setHorizontalAlignment(SwingConstants.CENTER);
            hallPane.add(label);
        }
        hallPane.add(new JLabel(""));
        buttons = new MagicSeatButton[rows][columns];
        for(int i = 0; i < rows; ++i){
            int j;
            JLabel label = new JLabel(Integer.toString(i+1));
            label.setHorizontalAlignment(SwingConstants.CENTER);
            hallPane.add(label);
            for(j = 0; j < Math.min(sizes[i], columns); ++j) {
                buttons[i][j] = new MagicSeatButton();
                buttons[i][j].setLayout(new GridLayout());
                Date date = (Date)spDate.getValue();
                LocalDate spinnerDate = date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                PotentialTicket temporary = new PotentialTicket(new Seat(i+1,j+1),
                        (Showing) cbHourList.getSelectedItem(), spinnerDate);
                PotentialTicket potentialTicket = tempProgram.potentialTickets.stream().
                        filter(tick -> tick.equals(temporary)).findFirst().orElse(null);
                if(potentialTicket == null || potentialTicket.askIfIsSold()){
                    buttons[i][j].setEnabled(false);
                    buttons[i][j].setBackground(Color.RED);
                }else {
                    buttons[i][j].setBackground(Color.green);
                    buttons[i][j].setActionCommand(i + ":" + j);
                    buttons[i][j].addActionListener(e -> {
                        String choice = e.getActionCommand();
                        String[] rowAndSeatS = choice.split(":");
                        int[] rowAndSeat = new int[2];
                        rowAndSeat[0] = Integer.parseInt(rowAndSeatS[0]);
                        rowAndSeat[1] = Integer.parseInt(rowAndSeatS[1]);
                        Date date1 = (Date) spDate.getValue();
                        LocalDate spinnerDate1 = date1.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                        PotentialTicket temp = new PotentialTicket(new Seat(rowAndSeat[0] + 1, rowAndSeat[1] + 1),
                                (Showing) cbHourList.getSelectedItem(), spinnerDate1);
                        PotentialTicket ticket = tempProgram.potentialTickets.stream().filter(tick -> tick.equals(temp))
                                .findFirst().orElse(null);
                        if (buttons[rowAndSeat[0]][rowAndSeat[1]].isYellow) {
                            potentialTicketsToSell.remove(ticket);
                            AvailabilityForm.this.buttons[rowAndSeat[0]][rowAndSeat[1]].setBackground(Color.green);
                            AvailabilityForm.this.buttons[rowAndSeat[0]][rowAndSeat[1]].isYellow = false;
                            if(potentialTicketsToSell.size() == 0){
                                btSell.setEnabled(false);
                            }
                        } else {
                            if (ticket != null)
                                potentialTicketsToSell.add(ticket);

                            btSell.setEnabled(true);

                            AvailabilityForm.this.buttons[rowAndSeat[0]][rowAndSeat[1]].setBackground(Color.yellow);
                            AvailabilityForm.this.buttons[rowAndSeat[0]][rowAndSeat[1]].isYellow = true;
                        }
                    });
                }
                hallPane.add(buttons[i][j]);
            }
            while (j < columns){
                buttons[i][j] = new MagicSeatButton();
                buttons[i][j].setLayout(new GridLayout());
                buttons[i][j].setBackground(Color.WHITE);
                buttons[i][j].setBorder(null);
                buttons[i][j].setEnabled(false);
                hallPane.add(buttons[i][j]);
                ++j;
            }
            hallPane.add(new JLabel(""));
        }
    }

    /** Filters films by th chosen date and adds them to the JComboBox; prepares class fields for choosing showing */
    private void filterFilms(){
        showingsOfTheDay.clear();
        filmsOfTheDay.clear();
        btConfirm.setEnabled(true);
        hallPane.removeAll();
        lbHall.setText("");
        JLabel lbl = new JLabel("Tu wyświetli się sala");
        lbl.setHorizontalAlignment(SwingConstants.CENTER);
        hallPane.add(lbl);
        if(cbHourList.getItemCount() > 0)
            cbHourList.removeAllItems();

        if(cbFilm.getItemCount() > 0)
            cbFilm.removeAllItems();

        cbFilm.setEnabled(true);
        cbHourList.setEnabled(true);
        Date date = (Date)spDate.getValue();
        LocalDate spinnerDate = date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        tempProgram = this.cinema.findProgramByDate(spinnerDate);
        if(tempProgram == null) {
            hallPane.removeAll();
            JLabel lbl1 = new JLabel("Brak filmów do wyświetlenia w wybranej dacie");
            lbl1.setHorizontalAlignment(SwingConstants.CENTER);
            hallPane.add(lbl1);
            cbFilm.setEnabled(false);
            cbHourList.setEnabled(false);
            btConfirm.setEnabled(false);
            return;
        }

        showingsOfTheDay = Program.filterByDay(spinnerDate.getDayOfWeek(), tempProgram.showingList);
        Film film;
        if(showingsOfTheDay.size() == 0)
        {
            hallPane.removeAll();
            JLabel lbl1 = new JLabel("Brak filmów do wyświetlenia w wybranej dacie");
            lbl1.setHorizontalAlignment(SwingConstants.CENTER);
            hallPane.add(lbl1);
            cbFilm.setEnabled(false);
            cbHourList.setEnabled(false);
            btConfirm.setEnabled(false);
            return;
        }
        for (Showing show : showingsOfTheDay) {
            film = show.getFilm();
            if (!filmsOfTheDay.contains(film))
                filmsOfTheDay.add(film);
        }

        for (Film f : filmsOfTheDay)
            cbFilm.addItem(f);

        filterHours();
    }

    /** Filters showing by chosen day and film; prepares class field for choosing the showing */
    private void filterHours(){
        cbHourList.setEnabled(true);
        hallPane.removeAll();
        hallPane.revalidate();
        hallPane.setLayout(new GridLayout(1,1));
        JLabel label1 = new JLabel("Tu wyświetli się sala");
        label1.setHorizontalAlignment(SwingConstants.CENTER);
        hallPane.add(label1);
        if(cbHourList.getItemCount() != 0)
            cbHourList.removeAllItems();

        Date date;
        ArrayList<Showing> tempSortableList = new ArrayList<>();
        for(Showing s : Program.filterByFilm((Film)cbFilm.getSelectedItem(),showingsOfTheDay)) {
            date = (Date) spDate.getValue();
            LocalDate spinnerDate = date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            if (spinnerDate.equals(LocalDate.now()) && s.getHour().compareTo(LocalTime.now().plusMinutes(-10)) < 0)
                continue;

            tempSortableList.add(s);
        }
        tempSortableList.sort(new ShowingComparator());
        for(Showing s : tempSortableList)
            cbHourList.addItem(s);

        btConfirm.setEnabled(true);
        if(cbHourList.getItemCount() == 0){
            hallPane.removeAll();
            JLabel label = new JLabel("Wszystkie dzisiejsze emisje tego filmu zostały zakończone");
            label.setHorizontalAlignment(SwingConstants.CENTER);
            hallPane.add(label);
            btConfirm.setEnabled(false);
            cbHourList.setEnabled(false);
        }
    }
}
